from collections import defaultdict
import json
# Data: List of points
points = {
    "P1": (9.64, 8.74), "P2": (49.21, 8.74), "P3": (68.48, 8.23), "P4": (88.77, 8.74),
    "P5": (107.54, 9.26), "P6": (136.46, 8.23), "P7": (156.24, 8.23), "P8": (174.50, 8.23),
    "P9": (194.79, 8.23), "P10": (223.71, 7.72), "P11": (242.98, 8.23), "P12": (262.26, 8.23),
    "P13": (281.54, 8.23), "P14": (305.38, 8.23), "P15": (324.15, 9.26), "P16": (344.44, 8.23),
    "P17": (9.64, 30.86), "P18": (29.93, 31.89), "P19": (49.21, 31.89), "P20": (68.48, 31.38),
    "P21": (88.27, 32.40), "P22": (107.54, 32.40), "P23": (127.33, 31.89), "P24": (145.59, 31.38),
    "P25": (164.86, 31.89), "P26": (185.15, 32.40), "P27": (203.42, 31.89), "P28": (222.69, 31.38),
    "P29": (241.46, 31.38), "P30": (270.88, 32.92), "P31": (305.89, 31.38), "P32": (325.67, 31.38),
    "P33": (345.45, 31.38), "P34": (15.73, 51.95), "P35": (40.07, 50.92), "P36": (59.86, 50.92),
    "P37": (79.13, 50.41), "P38": (97.90, 50.92), "P39": (117.18, 51.44), "P40": (136.46, 51.44),
    "P41": (156.75, 51.44), "P42": (175.01, 51.44), "P43": (194.29, 52.46), "P44": (213.56, 51.95),
    "P45": (233.35, 52.46), "P46": (252.62, 51.95), "P47": (277.48, 51.44), "P48": (305.89, 51.44),
    "P49": (325.67, 51.95), "P50": (345.45, 52.46), "P51": (17.75, 69.44), "P52": (45.15, 70.98),
    "P53": (64.42, 69.95), "P54": (83.70, 70.47), "P55": (102.47, 70.47), "P56": (122.25, 71.49),
    "P57": (141.53, 70.98), "P58": (160.30, 71.49), "P59": (180.08, 70.98), "P60": (199.36, 70.98),
    "P61": (218.63, 71.49), "P62": (237.91, 71.49), "P63": (267.33, 72.01), "P64": (21.81, 90.01),
    "P65": (54.28, 90.53), "P66": (75.08, 89.50), "P67": (92.83, 90.53), "P68": (113.12, 88.98),
    "P69": (131.38, 89.50), "P70": (151.67, 90.01), "P71": (170.95, 88.98), "P72": (188.71, 88.98),
    "P73": (207.98, 90.01), "P74": (227.26, 89.50), "P75": (263.27, 88.98), "P76": (325.16, 90.01),
    "P77": (12.68, 109.04), "P78": (37.03, 110.59), "P79": (60.87, 110.07), "P80": (134.93, 109.04),
    "P81": (205.45, 109.04), "P82": (230.81, 109.56), "P83": (254.65, 109.04), "P84": (278.49, 110.07),
    "P85": (305.89, 109.04), "P86": (326.68, 110.07), "P87": (344.95, 110.59)
}

label_map = {
    "P1": "ESC",
    "P2": "F1",
    "P3": "F2",
    "P4": "F3",
    "P5": "F4",
    "P6": "F5",
    "P7": "F6",
    "P8": "F7",
    "P9": "F8",
    "P10": "F9",
    "P11": "F10",
    "P12": "F11",
    "P13": "F12",
    "P14": "PRTSC",
    "P15": "SCRLK",
    "P16": "PAUSE",
    "P17": "`",
    "P18": "1",
    "P19": "2",
    "P20": "3",
    "P21": "4",
    "P22": "5",
    "P23": "6",
    "P24": "7",
    "P25": "8",
    "P26": "9",
    "P27": "0",
    "P28": "-",
    "P29": "=",
    "P30": "BACKSPACE",
    "P31": "INS",
    "P32": "HOME",
    "P33": "PAGEUP",
    "P34": "TAB",
    "P35": "Q",
    "P36": "W",
    "P37": "E",
    "P38": "R",
    "P39": "T",
    "P40": "Y",
    "P41": "U",
    "P42": "I",
    "P43": "O",
    "P44": "P",
    "P45": "[",
    "P46": "]",
    "P47": "\\",
    "P48": "DEL",
    "P49": "END",
    "P50": "PAGEDOWN",
    "P51": "CAPSLOCK",
    "P52": "A",
    "P53": "S",
    "P54": "D",
    "P55": "F",
    "P56": "G",
    "P57": "H",
    "P58": "J",
    "P59": "K",
    "P60": "L",
    "P61": ";",
    "P62": "'",
    "P63": "ENTER",
    "P64": "SHIFT",
    "P65": "Z",
    "P66": "X",
    "P67": "C",
    "P68": "V",
    "P69": "B",
    "P70": "N",
    "P71": "M",
    "P72": ",",
    "P73": ".",
    "P74": "/",
    "P75": "SHIFT",
    "P76": "UP",
    "P77": "CTRL",
    "P78": "WIN",
    "P79": "ALT",
    "P80": "SPACE",
    "P81": "ALT",
    "P82": "FN",
    "P83": "MENU",
    "P84": "CTRL",
    "P85": "LEFT",
    "P86": "DOWN",
    "P87": "RIGHT",
}
points = {label_map[label]: position for label, position in points.items()}

# Threshold to group points into horizontal lines
y_threshold = 3.0

# Cluster points into horizontal lines
clusters = defaultdict(list)
for label, (x, y) in points.items():
    added = False
    for cluster_y in clusters:
        if abs(cluster_y - y) <= y_threshold:
            clusters[cluster_y].append((label, x, y))
            added = True
            break
    if not added:
        clusters[y].append((label, x, y))

# Calculate average y for each cluster and create the final dictionary
final_points = {}
for cluster_y, cluster_points in clusters.items():
    average_y = sum(p[2] for p in cluster_points) / len(cluster_points)
    for label, x, _ in cluster_points:
        final_points[label] = (x, average_y)

# Output final dictionary
print("Final Points with Adjusted Y Values:")
for label, (x, y) in final_points.items():
    print(f"{label}: ({x:.2f} mm, {y:.2f} mm)")
    
with open("final_points.json", "w") as f:
    json.dump(final_points, f, indent=4)